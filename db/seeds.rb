# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
ActiveStorage::AnalyzeJob.queue_adapter = :inline
ActiveStorage::PurgeJob.queue_adapter = :inline

Admin.create!(email:"test@test",password:111111)

Quiz.create!(name: "Ruby基礎１")
Question.create!(quiz_id: 1,body: "ローカル変数の記述として適切なものはどれ")
Question.create!(quiz_id: 1,body: "予約後に該当するものはどれ？")
Question.create!(quiz_id: 1,body: "基礎指示子を指定することで何進数で解釈させるのか指定することができます。２進数と解釈させる基礎指示子はどれ？")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(4).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_10.png"), filename:"question_1.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(5).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_3.png"), filename:"question_3.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(6).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_5.png"), filename:"question_5.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(7).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_6.png"), filename:"question_6.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(8).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_7.png"), filename:"question_7.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(9).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_8.png"), filename:"question_8.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(10).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_9.png"), filename:"question_9.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(11).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_11.png"), filename:"question_11.png")

Choice.create!(question_id: 1,answer: false,body: "test-1")
Choice.create!(question_id: 1,answer: false,body: "test?")
Choice.create!(question_id: 1,answer: true,body: "test_1")
Choice.create!(question_id: 2,answer: false,body: "hash")
Choice.create!(question_id: 2,answer: true,body: "while")
Choice.create!(question_id: 2,answer: false,body: "ruby")
Choice.create!(question_id: 3,answer: true,body: "0b")
Choice.create!(question_id: 3,answer: false,body: "od")
Choice.create!(question_id: 3,answer: false,body: "0x")
Choice.create!(question_id: 4,answer: true,body: "2")
Choice.create!(question_id: 4,answer: false,body: "1")
Choice.create!(question_id: 4,answer: false,body: "1 and 2")
Choice.create!(question_id: 5,answer: false,body: "a is {a}")
Choice.create!(question_id: 5,answer: true,body: "a is 1")
Choice.create!(question_id: 5,answer: false,body: "NameError")
Choice.create!(question_id: 6,answer: true,body: "12")
Choice.create!(question_id: 6,answer: false,body: "12ab3")
Choice.create!(question_id: 6,answer: false,body: "ab")
Choice.create!(question_id: 7,answer: true,body: "2")
Choice.create!(question_id: 7,answer: false,body: "1")
Choice.create!(question_id: 7,answer: false,body: "1 && 2")
Choice.create!(question_id: 8,answer: true,body: "3")
Choice.create!(question_id: 8,answer: false,body: "0")
Choice.create!(question_id: 8,answer: false,body: "nill")
Choice.create!(question_id: 9,answer: true,body: "abcd")
Choice.create!(question_id: 9,answer: false,body: "ab""+""cd")
Choice.create!(question_id: 9,answer: false,body: "ab")
Choice.create!(question_id: 10,answer: false,body: "1.9")
Choice.create!(question_id: 10,answer: true,body: "1")
Choice.create!(question_id: 10,answer: false,body: "19")
Choice.create!(question_id: 11,answer: true,body: "nill")
Choice.create!(question_id: 11,answer: false,body: "3")
Choice.create!(question_id: 11,answer: false,body: "NameError")


Quiz.create!(name: "Ruby基礎２")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(12).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_12.png"), filename:"question_12.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(13).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_13.png"), filename:"question_13.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(14).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_14.png"), filename:"question_14.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(15).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_15.png"), filename:"question_15.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(16).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_16.png"), filename:"question_16.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(17).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_17.png"), filename:"question_17.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(18).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_18.png"), filename:"question_18.png")

Choice.create!(question_id: 12,answer: false,body: "11319100以外")
Choice.create!(question_id: 12,answer: true,body: "11319100")
Choice.create!(question_id: 12,answer: false,body: "nill")
Choice.create!(question_id: 13,answer: true,body: "false")
Choice.create!(question_id: 13,answer: false,body: "true")
Choice.create!(question_id: 13,answer: false,body: "foo1==foo1")
Choice.create!(question_id: 14,answer: false,body: '[hoge,foo,bar]')
Choice.create!(question_id: 14,answer: true,body: '["hoge,foo,bar"]')
Choice.create!(question_id: 14,answer: false,body: "hoge,foo,bar")
Choice.create!(question_id: 15,answer: false,body: "oo1")
Choice.create!(question_id: 15,answer: true,body: "foo")
Choice.create!(question_id: 15,answer: false,body: "foo1")
Choice.create!(question_id: 16,answer: true,body: "hogefoobar")
Choice.create!(question_id: 16,answer: false,body: "hoge,foo,bar")
Choice.create!(question_id: 16,answer: false,body: "[(hoge),(foo),(bar)]")
Choice.create!(question_id: 17,answer: true,body: "2205788")
Choice.create!(question_id: 17,answer: false,body: "2205788以外")
Choice.create!(question_id: 17,answer: false,body: "nill")
Choice.create!(question_id: 18,answer: false,body: "by")
Choice.create!(question_id: 18,answer: true,body: "ruby")
Choice.create!(question_id: 18,answer: false,body: "ru")

Quiz.create!(name: "Ruby基礎３")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(19).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_19.png"), filename:"question_19.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(20).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_20.png"), filename:"question_20.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(21).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_21.png"), filename:"question_21.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(22).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_22.png"), filename:"question_22.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(23).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_23.png"), filename:"question_23.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(24).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_24.png"), filename:"question_24.png")

Choice.create!(question_id: 19,answer: true,body: "4")
Choice.create!(question_id: 19,answer: false,body: "2,3,4")
Choice.create!(question_id: 19,answer: false,body: "nill")
Choice.create!(question_id: 20,answer: false,body: "[1]")
Choice.create!(question_id: 20,answer: false,body: "[2]")
Choice.create!(question_id: 20,answer: true,body: "[2,3]")
Choice.create!(question_id: 21,answer: false,body: '[2,3]')
Choice.create!(question_id: 21,answer: true,body: '[2,3,4]')
Choice.create!(question_id: 21,answer: false,body: "[3]")
Choice.create!(question_id: 22,answer: true,body: "[2,3]")
Choice.create!(question_id: 22,answer: false,body: "[2]")
Choice.create!(question_id: 22,answer: false,body: "[1]")
Choice.create!(question_id: 23,answer: false,body: "[0,'aa','aa','aa']")
Choice.create!(question_id: 23,answer: true,body: "[0,'aa']")
Choice.create!(question_id: 23,answer: false,body: "['aa','aa','aa','aa']")
Choice.create!(question_id: 24,answer: true,body: "[0,'a','b','c',3,4]")
Choice.create!(question_id: 24,answer: false,body: "[0,'a','b',3,4]")
Choice.create!(question_id: 24,answer: false,body: "[0,'a','b',3,4,nill]")

Quiz.create!(name: "Ruby基礎４")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(25).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_25.png"), filename:"question_25.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(26).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_26.png"), filename:"question_26.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(27).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_27.png"), filename:"question_27.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(28).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_28.png"), filename:"question_28.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(29).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_29.png"), filename:"question_29.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(30).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_30.png"), filename:"question_30.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(31).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_31.png"), filename:"question_31.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(32).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_32.png"), filename:"question_32.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(33).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_33.png"), filename:"question_33.png")
Question.create!(quiz_id: 4,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(34).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_34.png"), filename:"question_34.png")

Choice.create!(question_id: 25,answer: false,body: "1~4が出力される")
Choice.create!(question_id: 25,answer: true,body: "0~3が出力される")
Choice.create!(question_id: 25,answer: false,body: "4")
Choice.create!(question_id: 26,answer: true,body: "true")
Choice.create!(question_id: 26,answer: false,body: "false")
Choice.create!(question_id: 26,answer: false,body: "method-error")
Choice.create!(question_id: 27,answer: true,body: 'b,c')
Choice.create!(question_id: 27,answer: false,body: 'b,c,d')
Choice.create!(question_id: 27,answer: false,body: "b")
Choice.create!(question_id: 28,answer: false,body: ":foo1=>1")
Choice.create!(question_id: 28,answer: true,body: ":foo1=>1,:foo2=>2")
Choice.create!(question_id: 28,answer: false,body: "1")
Choice.create!(question_id: 29,answer: false,body: "1~10が出力")
Choice.create!(question_id: 29,answer: true,body: "4を除いた1~10が出力")
Choice.create!(question_id: 29,answer: false,body: "4が出力")
Choice.create!(question_id: 30,answer: false,body: "1")
Choice.create!(question_id: 30,answer: true,body: "2")
Choice.create!(question_id: 30,answer: false,body: "10")
Choice.create!(question_id: 31,answer: false,body: "false")
Choice.create!(question_id: 31,answer: false,body: "1")
Choice.create!(question_id: 31,answer: true,body: "true")
Choice.create!(question_id: 32,answer: true,body: "1")
Choice.create!(question_id: 32,answer: false,body: "2")
Choice.create!(question_id: 32,answer: false,body: "nil")
Choice.create!(question_id: 33,answer: false,body: "1~10までの範囲")
Choice.create!(question_id: 33,answer: false,body: "2~9までの範囲")
Choice.create!(question_id: 33,answer: true,body: "1~10未満の範囲")
Choice.create!(question_id: 34,answer: true,body: "1,2,3が出力")
Choice.create!(question_id: 34,answer: false,body: "1,2が出力")
Choice.create!(question_id: 34,answer: false,body: "3が出力")

Quiz.create!(name: "Ruby基礎５")
Question.create!(quiz_id: 5,body: "initializeメソッドの意味で正しいものはどれ")
Question.create!(quiz_id: 5,body: "freezeメソッドの使い道について正しいもの")
Question.create!(quiz_id: 5,body: "instance_variable_getメソッドの意味として正しいものはどれ")
Question.create!(quiz_id: 5,body: "オブジェクトに記述されていないメソッドを呼び出した時の動作として正しいものはどれ")
Question.create!(quiz_id: 5,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(39).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_39.png"), filename:"question_39.png")
Question.create!(quiz_id: 5,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(40).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_40.png"), filename:"question_40.png")
Question.create!(quiz_id: 5,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(41).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_41.png"), filename:"question_41.png")
Question.create!(quiz_id: 5,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(42).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_42.png"), filename:"question_42.png")
Question.create!(quiz_id: 5,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(43).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_43.png"), filename:"question_43.png")

Choice.create!(question_id: 35,answer: false,body: "様々な処理の最後に実行される初期化メソッド")
Choice.create!(question_id: 35,answer: false,body: "様々な処理の最初に実行される初期化メソッド")
Choice.create!(question_id: 35,answer: true,body: "newメソッドの際に自動で呼び出されるもの")
Choice.create!(question_id: 36,answer: false,body: "変数.freezeとすることでオブジェクトを一切使えないようにする、")
Choice.create!(question_id: 36,answer: true,body: "変数.freezeとすることでオブジェクトの変更を禁止する")
Choice.create!(question_id: 36,answer: false,body: "存在しないメソッド")
Choice.create!(question_id: 37,answer: true,body: "インスタンス変数の取得")
Choice.create!(question_id: 37,answer: false,body: "インスタンス変数の設定")
Choice.create!(question_id: 37,answer: false,body: "インスタンス変数の一覧")
Choice.create!(question_id: 38,answer: false,body: "全ての場合においてNoMethodErrorを出力する")
Choice.create!(question_id: 38,answer: false,body: "no_methodメソッドが呼び出されて、no_methodを定義していれば、その処理が行われる")
Choice.create!(question_id: 38,answer: true,body: "method_missingメソッドが呼び出されて、method_missingを定義していればその処理が行われる。")
Choice.create!(question_id: 39,answer: false,body: "-3")
Choice.create!(question_id: 39,answer: true,body: "3")
Choice.create!(question_id: 39,answer: false,body: "3.0")
Choice.create!(question_id: 40,answer: true,body: "2")
Choice.create!(question_id: 40,answer: false,body: "1")
Choice.create!(question_id: 40,answer: false,body: "0")
Choice.create!(question_id: 41,answer: false,body: 'hash')
Choice.create!(question_id: 41,answer: false,body: 'string')
Choice.create!(question_id: 41,answer: true,body: "symbol")
Choice.create!(question_id: 42,answer: false,body: "2")
Choice.create!(question_id: 42,answer: true,body: "1")
Choice.create!(question_id: 42,answer: false,body: "1.30")
Choice.create!(question_id: 43,answer: false,body: "9")
Choice.create!(question_id: 43,answer: false,body: "12")
Choice.create!(question_id: 43,answer: true,body: "27")

Quiz.create!(name: "Ruby基礎６")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(44).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_44.png"), filename:"question_44.png")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(45).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_45.png"), filename:"question_45.png")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(46).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_46.png"), filename:"question_46.png")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(47).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_47.png"), filename:"question_47.png")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(48).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_48.png"), filename:"question_48.png")
Question.create!(quiz_id: 6,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(49).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_49.png"), filename:"question_49.png")

Choice.create!(question_id: 44,answer: false,body: "2")
Choice.create!(question_id: 44,answer: false,body: "0")
Choice.create!(question_id: 44,answer: true,body: "1")
Choice.create!(question_id: 45,answer: true,body: "7")
Choice.create!(question_id: 45,answer: false,body: "8")
Choice.create!(question_id: 45,answer: false,body: "7.8")
Choice.create!(question_id: 46,answer: false,body: "[5/4]")
Choice.create!(question_id: 46,answer: false,body: "1.25")
Choice.create!(question_id: 46,answer: true,body: "[1,(1/20)]")
Choice.create!(question_id: 47,answer: true,body: "1")
Choice.create!(question_id: 47,answer: false,body: "2")
Choice.create!(question_id: 47,answer: false,body: "0.5。")
Choice.create!(question_id: 48,answer: false,body: "1")
Choice.create!(question_id: 48,answer: false,body: "0.25")
Choice.create!(question_id: 48,answer: true,body: "4")
Choice.create!(question_id: 49,answer: false,body: "[-1/0]")
Choice.create!(question_id: 49,answer: true,body: "1")
Choice.create!(question_id: 49,answer: false,body: "nil")

VestAnswer.create!(description: "ローカル変数は小文字かアンダースコアで始まる文字。アンダーバー以外の記号は不正です。",question_id: 1)
VestAnswer.create!(description: "予約後一覧（１部）→nil,true,false,not,BEGIN,then,yield,while,when...etc。",question_id: 2)
VestAnswer.create!(description: "２進数→ob(例(0b01→1)),8進数→0o(例(0o10→8)),10進数→0d(例(0d10→10)),16進数→0x(例(0x10→16))",question_id: 3)
VestAnswer.create!(description: "&&(論理積)は左辺が真ならば右辺を評価し、結果を返す。評価結果が偽の場合はその時点の値を返す。&&と同様の論理演算子にandがある。andは優先度が低いと覚えておきましょう。例（p 1 and 2→（p 1） and 2→結果：1） ||は論理和(orも||と同様。調べてみましょう)。",question_id: 4)
VestAnswer.create!(description: 'ダブルクオーテーションで囲った式は#{}内で変数を記述すると自動展開する。シングルクオテーションの場合は自動展開せず#{変数}も文字列として出力する。',question_id: 5)
VestAnswer.create!(description: "to_iメソッドは文字列を数値に変換するメソッド。数値に変換できない文字がある場合、それ以降の文字は無視して結果を返す。",question_id: 6)
VestAnswer.create!(description: "&&(論理積)は左辺が真ならば右辺を評価し、結果を返す。評価結果が偽の場合はその時点の値を返す。&&と同様の論理演算子にandがある。andは優先度が低いと覚えておきましょう。例（p 1 and 2→（p 1） and 2→結果：1） ||は論理和(orも||と同様。調べてみましょう)",question_id: 7)
VestAnswer.create!(description: "if文は条件が成立(true)した場合に処理を行う(変数bに３を代入)。その為、falseの倍位は処理がされない。尚、変数の宣言とif文を組み合わせた場合は変数自体は確保されます(確保してるけど、空の為nilが返る)。",question_id: 8)
VestAnswer.create!(description: "文字列を連続して記述すると、それらを連結して文字列を生成する(空白は関係ない)。",question_id: 9)
VestAnswer.create!(description: "to_iメソッドは文字列を数値に変換するメソッド。数値に変換できない文字がある場合、それ以降の文字は無視して結果を返す。小数点を表す.(ピリオド)も変換できない。",question_id: 10)
VestAnswer.create!(description: "if文は条件が成立(true)した場合に処理を行う(変数に値を代入)。その為、falseの場合は処理がされない。elsifを記述することでifの条件が成立しなかった場合に、さらに条件を指定する事ができます。条件が成立しない場合の処理はelseの使用により可能。",question_id: 11)
VestAnswer.create!(description: "文字列リテラルは毎回新しいオブジェクトを生成する為、毎回新しいオブジェクトを生成する為、オブジェクトIDが変わります。 ※シンボルは同じオブジェクトを参照する為IDは変わらない",question_id: 12)
VestAnswer.create!(description: "equal?メソッドはオブジェクトIDは同一かどうか判定するメソッド。＝＝は2つのオブジェクトが同一かどうかを判定する。＝＝と同様な働きをするものにeql？があり、違いとしては、型の比較もする為1.0.eql? 1 =>falseとなる(1.0 == 1 => true)。",question_id: 13)
VestAnswer.create!(description: "%w(1 2 3 4)=>[1,2,3,4]と%記法を用いることで配列を生成することができる。空白が区切り文字となる。,は区切り文字として判定されない。",question_id: 14)
VestAnswer.create!(description: "chopメソッドは文字列の最後の文字を取り除いた値を返すメソッド。尚、chop!とすると破壊的メソッドとなる",question_id: 15)
VestAnswer.create!(description: 'joinメソッドは配列の要素を連結して文字列を生成するメソッド。',question_id: 16)
VestAnswer.create!(description: "文字列リテラルは毎回新しいオブジェクトを生成する為、毎回新しいオブジェクトを生成する為、オブジェクトIDが変わります。 ※シンボルは同じオブジェクトを参照する為IDは変わらない",question_id: 17)
VestAnswer.create!(description: "＜＜を使うと、文字列の末尾に連結することができる",question_id: 18)
VestAnswer.create!(description: "for式ではスコープが作成されないので、内部で初期化した変数は、以降のコードでも参照可能。eachメソッドはスコープを作成する為ブロック中で初期化したローカル変数は外部からは参照できない。",question_id: 19)
VestAnswer.create!(description: "a,b = 1,2,3とした場合、a = 1, b = 2で3は代入されない。代入する値が多く余った値を全て代入したい場合は、最後の変数の前に*をつけると、余った値が配列として纏めて代入される",question_id: 20)
VestAnswer.create!(description: "a[2 , 3]とすると配列の２番目から数えて3つを取得することができる。",question_id: 21)
VestAnswer.create!(description: "fooメソッドの引数に*をつけることで、可変長変数とすることができる。メソッドを呼び出す際の引数が余る場合に可変長変数とすることで余った引数を変数bに代入することができる。",question_id: 22)
VestAnswer.create!(description: 'a[1,3]は配列の1番目から3つの値(1,2,3)を"aa"に置き換える。結果変数aの配列は[0 , "aa"]になる。',question_id: 23)
VestAnswer.create!(description: 'a[1 , 2]は配列の1番目から2つの値(1,2)を"a","b","c"に置き換える。取り出した値は2つで置き換える値は3つ。この場合、余った値も配列に追加される。',question_id: 24)
VestAnswer.create!(description: "timesメソッドは指定した回数をループさせる際に便利なメソッドです",question_id: 25)
VestAnswer.create!(description: '//で囲んだものは、正規表現オブジェクトが生成されます。これらの値はRegexpクラスのインスタンスになります。文字列"abcde".sub(/b/,"w")のコードを記述すると、正規表現の文字(b)にマッチしたものをwに置き換えることが可能。今回の問題は、"acdehi"を/a→b or c →d → e →f or g h → iの正規表現で比較しマッチしているかどうかを判定するもの。',question_id: 26)
VestAnswer.create!(description: "a[1..2]は要素の1番目から2番目の値を出力する。",question_id: 27)
VestAnswer.create!(description: "foo(1,2, :foo1=>1, :foo2=>2)はfooメソッドに4つの引数を指定しているように見えるが実際は３番目以降の値(:foo1=>1, :foo2=>2)が一つのハッシュとして引き渡しています。→省略しない書き方(foo(1,2, {:foo1=>1, :foo2=>2}))",question_id: 28)
VestAnswer.create!(description: "nextで指定した条件にマッチした時、次のループに進ませるメソッドです",question_id: 29)
VestAnswer.create!(description: "caseで指定した式の評価値と、whenで定義した条件を比較し最初にマッチしたwhenの処理を実施します。",question_id: 30)
VestAnswer.create!(description: "正規表現オプションにiを指定すると、小文字と大文字の区別をしないように指定することができる。",question_id: 31)
VestAnswer.create!(description: "caseで指定した式の評価値と、whenで定義した条件を比較し最初にマッチしたwhenの処理を実施します。",question_id: 32)
VestAnswer.create!(description: '1..10は1から10迄の範囲、1...10は1から10未満の範囲を示す。',question_id: 33)
VestAnswer.create!(description: 'behinは実行。rescueはbeginにて例外が発生した場合の処理。elseはrescueが実行されなかった場合の処理。ensureは必ず実行。',question_id: 34)

