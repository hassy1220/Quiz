# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the bin/rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)
ActiveStorage::AnalyzeJob.queue_adapter = :inline
ActiveStorage::PurgeJob.queue_adapter = :inline

Admin.create!(email:"test@test",password:111111)

Quiz.create!(name: "Ruby基礎１")
Question.create!(quiz_id: 1,body: "ローカル変数の記述として適切なものはどれ")
Question.create!(quiz_id: 1,body: "予約後に該当するものはどれ？")
Question.create!(quiz_id: 1,body: "基礎指示子を指定することで何進数で解釈させるのか指定することができます。２進数と解釈させる基礎指示子はどれ？")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(4).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_10.png"), filename:"question_1.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(5).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_3.png"), filename:"question_3.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(6).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_5.png"), filename:"question_5.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(7).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_6.png"), filename:"question_6.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(8).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_7.png"), filename:"question_7.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(9).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_8.png"), filename:"question_8.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(10).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_9.png"), filename:"question_9.png")
Question.create!(quiz_id: 1,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(11).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_11.png"), filename:"question_11.png")

Choice.create!(question_id: 1,answer: false,body: "test-1")
Choice.create!(question_id: 1,answer: false,body: "test?")
Choice.create!(question_id: 1,answer: true,body: "test_1")
Choice.create!(question_id: 2,answer: false,body: "hash")
Choice.create!(question_id: 2,answer: true,body: "while")
Choice.create!(question_id: 2,answer: false,body: "ruby")
Choice.create!(question_id: 3,answer: true,body: "0b")
Choice.create!(question_id: 3,answer: false,body: "od")
Choice.create!(question_id: 3,answer: false,body: "0x")
Choice.create!(question_id: 4,answer: true,body: "2")
Choice.create!(question_id: 4,answer: false,body: "1")
Choice.create!(question_id: 4,answer: false,body: "1 and 2")
Choice.create!(question_id: 5,answer: false,body: "a is {a}")
Choice.create!(question_id: 5,answer: true,body: "a is 1")
Choice.create!(question_id: 5,answer: false,body: "NameError")
Choice.create!(question_id: 6,answer: true,body: "12")
Choice.create!(question_id: 6,answer: false,body: "12ab3")
Choice.create!(question_id: 6,answer: false,body: "ab")
Choice.create!(question_id: 7,answer: true,body: "2")
Choice.create!(question_id: 7,answer: false,body: "1")
Choice.create!(question_id: 7,answer: false,body: "1 && 2")
Choice.create!(question_id: 8,answer: true,body: "3")
Choice.create!(question_id: 8,answer: false,body: "0")
Choice.create!(question_id: 8,answer: false,body: "nill")
Choice.create!(question_id: 9,answer: true,body: "abcd")
Choice.create!(question_id: 9,answer: false,body: "ab""+""cd")
Choice.create!(question_id: 9,answer: false,body: "ab")
Choice.create!(question_id: 10,answer: false,body: "1.9")
Choice.create!(question_id: 10,answer: true,body: "1")
Choice.create!(question_id: 10,answer: false,body: "19")
Choice.create!(question_id: 11,answer: true,body: "nill")
Choice.create!(question_id: 11,answer: false,body: "3")
Choice.create!(question_id: 11,answer: false,body: "NameError")


Quiz.create!(name: "Ruby基礎２")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(12).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_12.png"), filename:"question_12.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(13).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_13.png"), filename:"question_13.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(14).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_14.png"), filename:"question_14.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(15).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_15.png"), filename:"question_15.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(16).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_16.png"), filename:"question_16.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(17).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_17.png"), filename:"question_17.png")
Question.create!(quiz_id: 2,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(18).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_18.png"), filename:"question_18.png")

Choice.create!(question_id: 12,answer: false,body: "11319100以外")
Choice.create!(question_id: 12,answer: true,body: "11319100")
Choice.create!(question_id: 12,answer: false,body: "nill")
Choice.create!(question_id: 13,answer: true,body: "false")
Choice.create!(question_id: 13,answer: false,body: "true")
Choice.create!(question_id: 13,answer: false,body: "foo1==foo1")
Choice.create!(question_id: 14,answer: false,body: '[hoge,foo,bar]')
Choice.create!(question_id: 14,answer: true,body: '["hoge,foo,bar"]')
Choice.create!(question_id: 14,answer: false,body: "hoge,foo,bar")
Choice.create!(question_id: 15,answer: false,body: "oo1")
Choice.create!(question_id: 15,answer: true,body: "foo")
Choice.create!(question_id: 15,answer: false,body: "foo1")
Choice.create!(question_id: 16,answer: true,body: "hogefoobar")
Choice.create!(question_id: 16,answer: false,body: "hoge,foo,bar")
Choice.create!(question_id: 16,answer: false,body: "[(hoge),(foo),(bar)]")
Choice.create!(question_id: 17,answer: true,body: "2205788")
Choice.create!(question_id: 17,answer: false,body: "2205788以外")
Choice.create!(question_id: 17,answer: false,body: "nill")
Choice.create!(question_id: 18,answer: false,body: "by")
Choice.create!(question_id: 18,answer: true,body: "ruby")
Choice.create!(question_id: 18,answer: false,body: "ru")

Quiz.create!(name: "Ruby基礎３")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(19).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_19.png"), filename:"question_19.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(20).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_20.png"), filename:"question_20.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(21).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_21.png"), filename:"question_21.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(22).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_22.png"), filename:"question_22.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(23).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_23.png"), filename:"question_23.png")
Question.create!(quiz_id: 3,body: "以下メソッドの実行結果として正しいものはどれ")
Question.find(24).image.attach(io: File.open("#{Rails.root}/db/fixtures/question_24.png"), filename:"question_24.png")

Choice.create!(question_id: 19,answer: true,body: "4")
Choice.create!(question_id: 19,answer: false,body: "2,3,4")
Choice.create!(question_id: 19,answer: false,body: "nill")
Choice.create!(question_id: 20,answer: false,body: "[1]")
Choice.create!(question_id: 20,answer: false,body: "[2]")
Choice.create!(question_id: 20,answer: true,body: "[2,3]")
Choice.create!(question_id: 21,answer: false,body: '[2,3]')
Choice.create!(question_id: 21,answer: true,body: '[2,3,4]')
Choice.create!(question_id: 21,answer: false,body: "[3]")
Choice.create!(question_id: 22,answer: true,body: "[2,3]")
Choice.create!(question_id: 22,answer: false,body: "[2]")
Choice.create!(question_id: 22,answer: false,body: "[1]")
Choice.create!(question_id: 23,answer: false,body: "[0,'aa','aa','aa']")
Choice.create!(question_id: 23,answer: true,body: "[0,'aa']")
Choice.create!(question_id: 23,answer: false,body: "['aa','aa','aa','aa']")
Choice.create!(question_id: 24,answer: true,body: "[0,'a','b','c',3,4]")
Choice.create!(question_id: 24,answer: false,body: "[0,'a','b',3,4]")
Choice.create!(question_id: 24,answer: false,body: "[0,'a','b',3,4,nill]")

VestAnswer.create!(description: "ローカル変数は小文字かアンダースコアで始まる文字。アンダーバー以外の記号は不正です。",question_id: 1)
VestAnswer.create!(description: "予約後一覧（１部）→nil,true,false,not,BEGIN,then,yield,while,when...etc。",question_id: 2)
VestAnswer.create!(description: "２進数→ob(例(0b01→1)),8進数→0o(例(0o10→8)),10進数→0d(例(0d10→10)),16進数→0x(例(0x10→16))",question_id: 3)
VestAnswer.create!(description: "&&(論理積)は左辺が真ならば右辺を評価し、結果を返す。評価結果が偽の場合はその時点の値を返す。&&と同様の論理演算子にandがある。andは優先度が低いと覚えておきましょう。例（p 1 and 2→（p 1） and 2→結果：1） ||は論理和(orも||と同様。調べてみましょう)。",question_id: 4)
VestAnswer.create!(description: 'ダブルクオーテーションで囲った式は#{}内で変数を記述すると自動展開する。シングルクオテーションの場合は自動展開せず#{変数}も文字列として出力する。',question_id: 5)
VestAnswer.create!(description: "to_iメソッドは文字列を数値に変換するメソッド。数値に変換できない文字がある場合、それ以降の文字は無視して結果を返す。",question_id: 6)
VestAnswer.create!(description: "&&(論理積)は左辺が真ならば右辺を評価し、結果を返す。評価結果が偽の場合はその時点の値を返す。&&と同様の論理演算子にandがある。andは優先度が低いと覚えておきましょう。例（p 1 and 2→（p 1） and 2→結果：1） ||は論理和(orも||と同様。調べてみましょう)",question_id: 7)
VestAnswer.create!(description: "if文は条件が成立(true)した場合に処理を行う(変数bに３を代入)。その為、falseの倍位は処理がされない。尚、変数の宣言とif文を組み合わせた場合は変数自体は確保されます(確保してるけど、空の為nilが返る)。",question_id: 8)
VestAnswer.create!(description: "文字列を連続して記述すると、それらを連結して文字列を生成する(空白は関係ない)。",question_id: 9)
VestAnswer.create!(description: "to_iメソッドは文字列を数値に変換するメソッド。数値に変換できない文字がある場合、それ以降の文字は無視して結果を返す。小数点を表す.(ピリオド)も変換できない。",question_id: 10)
VestAnswer.create!(description: "if文は条件が成立(true)した場合に処理を行う(変数に値を代入)。その為、falseの場合は処理がされない。elsifを記述することでifの条件が成立しなかった場合に、さらに条件を指定する事ができます。条件が成立しない場合の処理はelseの使用により可能。",question_id: 11)
